{"mappings":"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","sources":["gen/pkg.web/gen.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-d3f53e1d3fa85d1d.js","node_modules/@parcel/runtime-js/lib/runtime-2a76c13d94fd68f7.js","consts.ts","web/chunk.ts","web/chunk_manager.ts","web/easing.ts","web/player.ts","web/app.ts"],"sourcesContent":["\nlet wasm;\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n*/\nexport class Generator {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Generator.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    toJSON() {\n        return {\n            seed: this.seed,\n        };\n    }\n\n    toString() {\n        return JSON.stringify(this);\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_generator_free(ptr);\n    }\n    /**\n    * @param {number} seed\n    */\n    constructor(seed) {\n        const ret = wasm.generator_new_from_seed(seed);\n        return Generator.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    get seed() {\n        const ret = wasm.generator_seed(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} cx\n    * @param {number} cy\n    * @param {Uint8Array} cr_buf\n    * @param {Uint8Array} neigh_buf\n    */\n    genChunk(cx, cy, cr_buf, neigh_buf) {\n        try {\n            wasm.generator_genChunk(this.ptr, cx, cy, addBorrowedObject(cr_buf), addBorrowedObject(neigh_buf));\n        } finally {\n            heap[stack_pointer++] = undefined;\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_buffer_3f3d764d4747d564 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_d9aa266703cb98be = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_83db9690f9353e79 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_9e1ae1900cb0fbd5 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL('gen_bg.wasm', import.meta.url);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\nexport { initSync }\nexport default init;\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"3sdMm\\\":\\\"index.cff969c8.js\\\",\\\"4tSva\\\":\\\"gen_bg.9017f04e.wasm\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"4tSva\")).toString();","export const MAP_SEED = 0;\n\n// Keep the following constants in-sync with gen/src/lib.rs\n\nexport const CELL_RESULTS = {\n  Open: 0,\n  Normal: 1,\n  Bomb: 2,\n};\nexport const CHUNK_SIZE = 16;\n\nexport const CELL_STATES = {\n  Flagged: 1,\n  Clicked: 2,\n};\n","import { CHUNK_SIZE } from \"../consts\";\nimport type { Generator } from \"../gen/pkg.web/gen\";\n\nexport class Chunk {\n  private _chunk_x: number;\n  private _chunk_y: number;\n\n  /**\n   * The type of each cell. Values are one of CELL_RESULTS.*.\n   *\n   * This array must not be modified.\n   */\n  cell_type: Uint8Array;\n\n  /**\n   * Cache of neighbour bomb count.\n   *\n   * This array must not be modified.\n   */\n  neighbouring_bombs_count: Uint8Array;\n\n  /**\n   * State of the cell. A bit-combination of CELL_STATES.\n   */\n  cell_state: Uint8Array;\n\n  private constructor(chunk_x: number, chunk_y: number) {\n    this._chunk_x = chunk_x;\n    this._chunk_y = chunk_y;\n    this.cell_type = new Uint8Array(CHUNK_SIZE * CHUNK_SIZE);\n    this.neighbouring_bombs_count = new Uint8Array(CHUNK_SIZE * CHUNK_SIZE);\n    this.cell_state = new Uint8Array(CHUNK_SIZE * CHUNK_SIZE);\n  }\n\n  static fromGenerator(g: Generator, chunk_x: number, chunk_y: number): Chunk {\n    let c = new Chunk(chunk_x, chunk_y);\n    g.genChunk(chunk_x, chunk_y, c.cell_type, c.neighbouring_bombs_count);\n    return c;\n  }\n\n  get chunk_x() {\n    return this._chunk_x;\n  }\n  get chunk_y() {\n    return this._chunk_y;\n  }\n  get top_left() {\n    return [this.chunk_x * CHUNK_SIZE, this.chunk_y * CHUNK_SIZE];\n  }\n\n  /**\n   * Get the array index of a cell in this chunk. x and y needs to be between 0 and CHUNK_SIZE-1.\n   */\n  cell_index_at(x: number, y: number) {\n    return y * CHUNK_SIZE + x;\n  }\n}\n","import { CHUNK_SIZE } from \"../consts\";\nimport { Generator } from \"../gen/pkg.web/gen\";\nimport { Chunk } from \"./chunk\";\n\nexport interface Bounds {\n  x1: number, y1: number, x2: number, y2: number\n}\n\nexport class ChunkManager {\n  generator: Generator;\n  loaded_chunks: Map<string, Chunk>;\n  loading_queue: Map<string, Promise<Chunk>>;\n\n  constructor(generator: Generator) {\n    this.generator = generator;\n    this.loaded_chunks = new Map();\n    this.loading_queue = new Map();\n  }\n\n  private chunk_key(chunk_x: number, chunk_y: number) {\n    return `${chunk_x},${chunk_y}`;\n  }\n\n  load(chunk_x: number, chunk_y: number): Promise<Chunk> {\n    const key = this.chunk_key(chunk_x, chunk_y);\n    let existing_chunk = this.loaded_chunks.get(key);\n    if (existing_chunk) {\n      return Promise.resolve(existing_chunk);\n    }\n    let existing_p = this.loading_queue.get(key);\n    if (existing_p) {\n      return existing_p;\n    }\n    let p = this._load_chunk(chunk_x, chunk_y).then(chunk => {\n      if (this.loading_queue.has(key)) {\n        this.loading_queue.delete(key);\n      }\n      this.loaded_chunks.set(key, chunk);\n      return Promise.resolve(chunk);\n    });\n    this.loading_queue.set(key, p);\n    return p;\n  }\n\n  private async _load_chunk(chunk_x: number, chunk_y: number): Promise<Chunk> {\n    return Chunk.fromGenerator(this.generator, chunk_x, chunk_y);\n  }\n\n  unload(chunk_x: number, chunk_y: number) {\n    let key = this.chunk_key(chunk_x, chunk_y);\n    this._unload(key);\n  }\n\n  private _unload(chunk_key: string) {\n    this.loaded_chunks.delete(chunk_key);\n  }\n\n  worldRectToChunkBounds(world_rect: Bounds): Bounds {\n    let { x1, x2, y1, y2 } = world_rect;\n    return {\n      x1: Math.floor(x1 / CHUNK_SIZE),\n      y1: Math.floor(y1 / CHUNK_SIZE),\n      x2: Math.ceil(x2 / CHUNK_SIZE),\n      y2: Math.ceil(y2 / CHUNK_SIZE)\n    };\n  }\n\n  ensureChunksIn(chunk_bounds: Bounds) {\n    for (let cy = chunk_bounds.y1; cy < chunk_bounds.y2; cy += 1) {\n      for (let cx = chunk_bounds.x1; cx < chunk_bounds.x2; cx += 1) {\n        this.load(cx, cy);\n      }\n    }\n  }\n\n  unloadOutside(chunk_bounds: Bounds) {\n    let to_delete = new Set<string>();\n    for (let key of this.loaded_chunks.keys()) {\n      let [xstr, ystr] = key.split(\",\");\n      let x = parseInt(xstr);\n      let y = parseInt(ystr);\n      if (x < chunk_bounds.x1 || x >= chunk_bounds.x2 || y < chunk_bounds.y1 || y >= chunk_bounds.y2) {\n        to_delete.add(key);\n      }\n    }\n    for (let k of to_delete) {\n      this._unload(k);\n    }\n  }\n\n  hasLoading() {\n    return this.loading_queue.size > 0;\n  }\n\n  /**\n   * Get a loaded chunk. Will return undefined if not loaded.\n   */\n  getChunk(chunk_x: number, chunk_y: number): Chunk | undefined {\n    let key = this.chunk_key(chunk_x, chunk_y);\n    let chunk = this.loaded_chunks.get(key);\n    return chunk;\n  }\n\n  /**\n   * Like getChunk, but takes a block coordinate and get the chunk containing it, as well as returning an index.\n   */\n  getChunkOfBlock(x: number, y: number): [Chunk, number] | undefined {\n    let cx = Math.floor(x / CHUNK_SIZE);\n    let cy = Math.floor(y / CHUNK_SIZE);\n    let c = this.getChunk(cx, cy);\n    if (!c) {\n      return undefined;\n    }\n    let idx = c.cell_index_at(x - cx * CHUNK_SIZE, y - cy * CHUNK_SIZE);\n    return [c, idx];\n  }\n}\n","export function factor_ease(current: number, target: number, min_speed: number, max_speed: number, factor: number, dt: number): number {\n  let min_off = dt * min_speed;\n  let max_off = dt * max_speed;\n  let diff = Math.abs(current - target);\n  if (diff < min_off) {\n    return target;\n  }\n  let off = diff * factor * dt;\n  if (off < min_off) {\n    off = min_off;\n  }\n  if (off > max_off) {\n    off = max_off;\n  }\n  return current + Math.sign(target - current) * off;\n}\n","export class Player {\n  targeted_block: [number, number];\n\n  constructor() {\n    this.targeted_block = [0, 0];\n  }\n}\n","import init_wasm, { Generator } from \"../gen/pkg.web/gen\";\nimport { CELL_RESULTS, CELL_STATES, CHUNK_SIZE, MAP_SEED } from \"../consts\";\nimport { Chunk } from \"./chunk\";\nimport { Bounds, ChunkManager } from \"./chunk_manager\";\nimport { factor_ease } from \"./easing\";\nimport { Player } from \"./player\";\n\nasync function init() {\n  let main_canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n  let loading = document.getElementsByClassName(\"loading\")[0];\n  loading.textContent = \"Preparing wasm\\u2026\";\n  await init_wasm();\n  loading.textContent = \"Initializing map\\u2026\";\n  document.body.appendChild(main_canvas);\n\n  let app = new MinesweeperApp(main_canvas, () => {\n    loading.remove();\n  });\n\n  function handle_resize() {\n    main_canvas.width = window.innerWidth * window.devicePixelRatio;\n    main_canvas.height = window.innerHeight * window.devicePixelRatio;\n    window.scrollTo(0, 0);\n    app.handleResize();\n  }\n\n  handle_resize();\n  window.addEventListener(\"resize\", handle_resize);\n}\n\nif (document.readyState !== \"complete\") {\n  document.addEventListener(\"readystatechange\", () => {\n    if (document.readyState === \"complete\") {\n      init();\n    }\n  });\n} else {\n  init();\n}\n\nclass MinesweeperApp {\n  canvas: HTMLCanvasElement;\n  generator: Generator;\n  chunk_manager: ChunkManager;\n  center_pos: [number, number];\n  client_player: Player;\n  scale: number;\n  last_update_time: number;\n  current_update_time: number;\n  on_init_complete: (() => void) | null;\n  draw_context: CanvasRenderingContext2D;\n  gui_scale: number;\n  visible_world_rect: Bounds;\n  players: Player[];\n  mouse_sensitivity_inv: number;\n  cursor_at_world: [number, number];\n  clicking_block: [number, number] | null;\n  open_nearby_cells_queue: [number, number][];\n  last_nearby_cell_auto_open_time: number;\n\n  constructor(canvas: HTMLCanvasElement, on_init_complete: (() => void) | null = null) {\n    this.canvas = canvas;\n    this.generator = new Generator(MAP_SEED);\n    this.chunk_manager = new ChunkManager(this.generator);\n    this.client_player = new Player();\n    this.center_pos = this.client_player.targeted_block.map(x => x + 0.5) as [number, number];\n    this.scale = this.getDefaultScale();\n    this.last_update_time = Date.now();\n    this.on_init_complete = on_init_complete;\n    this.draw_context = canvas.getContext(\"2d\")!;\n    this.gui_scale = this.scale / 32;\n    this.players = [this.client_player];\n    this.cursor_at_world = [0.5, 0.5];\n    this.mouse_sensitivity_inv = this.scale * 1.8;\n    this.clicking_block = null;\n    this.open_nearby_cells_queue = [];\n    this.last_nearby_cell_auto_open_time = Date.now();\n\n    this.update = this.update.bind(this);\n    this.update();\n\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.handleTouchStart = this.handleTouchStart.bind(this);\n    this.handleTouchMove = this.handleTouchMove.bind(this);\n    this.handleTouchEnd = this.handleTouchEnd.bind(this);\n    this.handleWheel = this.handleWheel.bind(this);\n    canvas.addEventListener(\"mousedown\", this.handleMouseDown);\n    canvas.addEventListener(\"mousemove\", this.handleMouseMove);\n    canvas.addEventListener(\"mouseup\", this.handleMouseUp);\n    canvas.addEventListener(\"contextmenu\", evt => evt.preventDefault());\n    canvas.addEventListener(\"touchstart\", this.handleTouchStart);\n    canvas.addEventListener(\"wheel\", this.handleWheel);\n    canvas.addEventListener(\"pointerlockerror\", evt => {\n      alert(\"Pointer lock is not supported on your browser. Please use an alternative browser to play this game.\");\n    });\n\n    this.animateOpenNearbyCells(...this.client_player.targeted_block);\n  }\n\n  getDefaultScale() {\n    let smallest_axis = Math.min(window.innerWidth, window.innerHeight);\n    let target_nb_blocks = 15;\n    if (window.innerWidth > 800 && window.innerHeight > 800) {\n      target_nb_blocks = 30;\n    }\n    let pix_per_block = smallest_axis / target_nb_blocks;\n    return pix_per_block * window.devicePixelRatio;\n  }\n\n  handleResize() {\n  }\n\n  get deltaT() {\n    return (this.current_update_time - this.last_update_time) / 1000;\n  }\n\n  update() {\n    this.current_update_time = Date.now();\n    let old_player_pos = this.client_player.targeted_block.slice();\n    this.client_player.targeted_block = this.cursor_at_world.map(x => Math.floor(x)) as [number, number];\n    if (old_player_pos[0] != this.client_player.targeted_block[0] || old_player_pos[1] != this.client_player.targeted_block[1]) {\n      this.animateOpenNearbyCells(...this.client_player.targeted_block);\n    }\n    this.center_pos = this.center_pos.map((curr, i) => {\n      let target = this.cursor_at_world[i] + 0.5;\n      return factor_ease(curr, target, 1, Infinity, 12, this.deltaT);\n    }) as [number, number];\n    this.visible_world_rect = this.getVisibleWorldRectFromCenter(this.center_pos);\n    this.ensureRegion();\n    if (!this.chunk_manager.hasLoading() && this.on_init_complete) {\n      this.on_init_complete();\n      this.on_init_complete = null;\n    }\n    if (this.last_nearby_cell_auto_open_time < this.current_update_time - 10) {\n      this.iterOpenNearbyCells();\n      this.last_nearby_cell_auto_open_time = this.current_update_time;\n    }\n    this.draw();\n    this.last_update_time = this.current_update_time;\n    requestAnimationFrame(this.update);\n  }\n\n  getVisibleWorldRectFromCenter(center: [number, number]): Bounds {\n    let width = this.canvas.width;\n    let height = this.canvas.height;\n    let blocks_per_screen_pixel = 1 / this.scale;\n    let width_blocks = (width / 2) * blocks_per_screen_pixel;\n    let height_blocks = (height / 2) * blocks_per_screen_pixel;\n    return {\n      x1: center[0] - width_blocks,\n      x2: center[0] + width_blocks,\n      y1: center[1] - height_blocks,\n      y2: center[1] + height_blocks\n    };\n  }\n\n  ensureRegion() {\n    let player_bounds = this.chunk_manager.worldRectToChunkBounds(this.getVisibleWorldRectFromCenter(this.client_player.targeted_block.map(x => x + 0.5) as [number, number]));\n    let visible_bounds = this.chunk_manager.worldRectToChunkBounds(this.visible_world_rect);\n    let union_bounds: Bounds = {\n      x1: Math.min(player_bounds.x1, visible_bounds.x1),\n      x2: Math.max(player_bounds.x2, visible_bounds.x2),\n      y1: Math.min(player_bounds.y1, visible_bounds.y1),\n      y2: Math.max(player_bounds.y2, visible_bounds.y2)\n    };\n    // TODO: enable when multi-server ready\n    // this.chunk_manager.unloadOutside(union_bounds);\n    this.chunk_manager.ensureChunksIn(player_bounds);\n  }\n\n  worldToScreen(x: number, y: number): [number, number] {\n    let x1 = (x - this.center_pos[0]) * this.scale + this.canvas.width / 2;\n    let y1 = (y - this.center_pos[1]) * this.scale + this.canvas.height / 2;\n    return [x1, y1];\n  }\n\n  draw() {\n    let ctx = this.draw_context;\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    for (let chunk of this.chunk_manager.loaded_chunks.values()) {\n      this.drawChunk(chunk);\n    }\n    if (this.clicking_block) {\n      let [x, y] = this.worldToScreen(...this.clicking_block);\n      ctx.fillStyle = \"#000\";\n      ctx.globalAlpha = 0.3;\n      ctx.fillRect(x, y, this.scale, this.scale);\n      this, ctx.globalAlpha = 1;\n    }\n    for (let p of this.players) {\n      if (p != this.client_player) {\n        this.drawPlayer(p);\n      }\n    }\n    this.drawPlayer(this.client_player);\n    // cursor\n    ctx.fillStyle = \"#000\";\n    let dot_width = Math.max(this.gui_scale * 2, 2);\n    let cursor_coord = this.worldToScreen(...this.cursor_at_world);\n    ctx.fillRect(cursor_coord[0] - dot_width / 2, cursor_coord[1] - dot_width / 2, dot_width, dot_width);\n  }\n\n  drawChunk(chunk: Chunk) {\n    let ctx = this.draw_context;\n    let chunk_top_left = chunk.top_left;\n    if (chunk_top_left[0] + CHUNK_SIZE < this.visible_world_rect.x1 || chunk_top_left[0] >= this.visible_world_rect.x2 ||\n      chunk_top_left[1] + CHUNK_SIZE < this.visible_world_rect.y1 || chunk_top_left[1] >= this.visible_world_rect.y2) {\n      return;\n    }\n    for (let y = 0; y < CHUNK_SIZE; y += 1) {\n      for (let x = 0; x < CHUNK_SIZE; x += 1) {\n        let idx = chunk.cell_index_at(x, y);\n        if (chunk.cell_type[idx] == CELL_RESULTS.Open) {\n          continue;\n        }\n        let [sx, sy] = this.worldToScreen(chunk_top_left[0] + x, chunk_top_left[1] + y);\n        let [sw, sh] = [this.scale, this.scale];\n        if (!(chunk.cell_state[idx] & CELL_STATES.Clicked) && chunk.cell_type[idx] != CELL_RESULTS.Open) {\n          // border\n          ctx.fillStyle = \"#979797\";\n          ctx.fillRect(sx, sy, sw, sh);\n          // inner\n          const border = this.gui_scale;\n          ctx.fillStyle = \"#eeeeee\";\n          ctx.fillRect(sx + border, sy + border, sw - border * 2, sh - border * 2);\n          if (chunk.cell_state[idx] & CELL_STATES.Flagged) {\n            ctx.fillStyle = \"red\";\n            ctx.font = `${this.gui_scale * 20}px monospace`;\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillText(\"F\", sx + sw / 2, sy + sh / 2 + this.gui_scale * 2, sw);\n          }\n        } else if (chunk.cell_type[idx] == CELL_RESULTS.Normal) {\n          // number\n          let b_count = chunk.neighbouring_bombs_count[idx];\n          if (b_count > 0) {\n            // TODO: colors\n            ctx.fillStyle = \"#000\";\n            ctx.font = `${this.gui_scale * 20}px monospace`;\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"middle\";\n            ctx.fillText(b_count.toString(), sx + sw / 2, sy + sh / 2 + this.gui_scale * 2, sw);\n          }\n        } else if (chunk.cell_type[idx] == CELL_RESULTS.Bomb) {\n          ctx.fillStyle = \"red\";\n          ctx.font = `${this.gui_scale * 20}px monospace`;\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillText(\"!\", sx + sw / 2, sy + sh / 2 + this.gui_scale * 2, sw);\n        }\n      }\n    }\n  }\n\n  drawPlayer(player: Player) {\n    let ctx = this.draw_context;\n    let is_us = player === this.client_player;\n    let [block_x, block_y] = player.targeted_block;\n    let in_view = block_x >= this.visible_world_rect.x1 && block_x < this.visible_world_rect.x2 && block_y >= this.visible_world_rect.y1 && block_y < this.visible_world_rect.y2;\n    if (in_view) {\n      ctx.strokeStyle = \"#28ff49\"; // TODO: randomize\n      ctx.lineWidth = this.gui_scale * 3;\n      let rect_coord = this.worldToScreen(block_x, block_y);\n      ctx.strokeRect(...rect_coord, this.scale, this.scale);\n    }\n  }\n\n  handleMouseDown(evt: MouseEvent) {\n    evt.preventDefault();\n    if (document.pointerLockElement !== this.canvas) {\n      this.canvas.requestPointerLock();\n    } else {\n      if (evt.button == 0 || evt.button == 1) {\n        this.actionBeginClick();\n      } else if (evt.button == 2) {\n        this.actionFlag(...this.client_player.targeted_block);\n      }\n    }\n  }\n\n  handleMouseMove(evt: MouseEvent) {\n    evt.preventDefault();\n    if (document.pointerLockElement !== this.canvas) {\n      return;\n    }\n    this.actionMove(evt.movementX, evt.movementY);\n  }\n\n  handleMouseUp(evt: MouseEvent) {\n    evt.preventDefault();\n    let current_target = this.client_player.targeted_block;\n    if (this.clicking_block) {\n      if (this.clicking_block[0] === current_target[0] && this.clicking_block[1] === current_target[1]) {\n        this.actionClick(...this.clicking_block);\n      }\n      this.clicking_block = null;\n    }\n  }\n\n  handleTouchStart(evt: TouchEvent) {\n    evt.preventDefault();\n    document.addEventListener(\"touchmove\", this.handleTouchMove);\n    document.addEventListener(\"touchend\", this.handleTouchEnd);\n  }\n\n  handleTouchMove(evt: TouchEvent) {\n    evt.preventDefault();\n    // TODO\n  }\n\n  handleTouchEnd(evt: TouchEvent) {\n    evt.preventDefault();\n    document.removeEventListener(\"touchmove\", this.handleTouchMove);\n    document.removeEventListener(\"touchend\", this.handleTouchEnd);\n  }\n\n  handleWheel(evt: WheelEvent) {\n    let d_scale = -Math.sign(evt.deltaY) * 0.2;\n    this.scale *= 1 + d_scale;\n    if (this.scale < 20) {\n      this.scale = 20;\n    }\n    if (this.scale > window.innerWidth / 10) {\n      this.scale = window.innerWidth / 10;\n    }\n    this.gui_scale = this.scale / 32;\n  }\n\n  actionMove(dx: number, dy: number) {\n    dx = Math.sign(dx) * Math.max(Math.pow(Math.abs(dx), 1.1), dx);\n    dy = Math.sign(dy) * Math.max(Math.pow(Math.abs(dy), 1.1), dy);\n    this.cursor_at_world[0] += dx / this.scale;\n    this.cursor_at_world[1] += dy / this.scale;\n  }\n\n  isClickable(c: Chunk, idx: number) {\n    return !(c.cell_state[idx] & CELL_STATES.Clicked) && !(c.cell_state[idx] & CELL_STATES.Flagged) && c.cell_type[idx] != CELL_RESULTS.Open;\n  }\n\n  isFlaggable(c: Chunk, idx: number) {\n    return (c.cell_state[idx] & CELL_STATES.Flagged) || this.isClickable(c, idx);\n  }\n\n  computeAutoClickTargets(block_x: number, block_y: number): [number, number][] {\n    let cidx = this.chunk_manager.getChunkOfBlock(block_x, block_y);\n    if (!cidx) {\n      return [];\n    }\n    let [c, idx] = cidx;\n    if (!(c.cell_state[idx] & CELL_STATES.Clicked) || c.cell_type[idx] != CELL_RESULTS.Normal) {\n      return [];\n    }\n    let bomb_count = c.neighbouring_bombs_count[idx];\n    let targets: [number, number][] = [];\n    let found_bombs_count = 0;\n    for (let off_y = -1; off_y <= 1; off_y += 1) {\n      for (let off_x = -1; off_x <= 1; off_x += 1) {\n        if (off_y == 0 && off_x == 0) {\n          continue;\n        }\n        cidx = this.chunk_manager.getChunkOfBlock(block_x + off_x, block_y + off_y);\n        if (!cidx) {\n          return [];\n        }\n        [c, idx] = cidx;\n        if ((c.cell_state[idx] & CELL_STATES.Flagged) || ((c.cell_state[idx] & CELL_STATES.Clicked) && c.cell_type[idx] == CELL_RESULTS.Bomb)) {\n          // Either user suspected this is a bomb, or this is a bomb that has been revealed.\n          // Either way, we count it.\n          found_bombs_count += 1;\n        } else if (!(c.cell_state[idx] & CELL_STATES.Clicked) && c.cell_type[idx] != CELL_RESULTS.Open) {\n          // A click candidate\n          targets.push([block_x + off_x, block_y + off_y]);\n        }\n      }\n    }\n    if (found_bombs_count == bomb_count) {\n      return targets;\n    } else {\n      return [];\n    }\n  }\n\n  actionBeginClick() {\n    let pos = this.client_player.targeted_block.slice() as [number, number];\n    let cidx = this.chunk_manager.getChunkOfBlock(...pos);\n    if (!cidx) {\n      return;\n    }\n    let [c, idx] = cidx;\n    if (this.isClickable(c, idx) || this.computeAutoClickTargets(...pos).length > 0) {\n      this.clicking_block = pos;\n    }\n  }\n\n  actionClick(block_x: number, block_y: number): boolean {\n    let cidx = this.chunk_manager.getChunkOfBlock(block_x, block_y);\n    if (!cidx) {\n      return false;\n    }\n    let [c, idx] = cidx;\n    if (c.cell_state[idx] & CELL_STATES.Flagged) {\n      return false;\n    }\n    if (this.isClickable(c, idx)) {\n      this.clicking_block = null;\n      c.cell_state[idx] |= CELL_STATES.Clicked;\n      this.animateOpenNearbyCells(block_x, block_y);\n      return true;\n    }\n    let targets = this.computeAutoClickTargets(block_x, block_y);\n    if (targets.length > 0) {\n      for (let [x, y] of targets) {\n        this.actionClick(x, y);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  actionFlag(block_x: number, block_y: number) {\n    let cidx = this.chunk_manager.getChunkOfBlock(block_x, block_y);\n    if (!cidx) {\n      return;\n    }\n    let [c, idx] = cidx;\n    if (this.isFlaggable(c, idx)) {\n      c.cell_state[idx] ^= CELL_STATES.Flagged;\n    }\n  }\n\n  iterOpenNearbyCells() {\n    let new_nexts: [number, number][] = [];\n    for (let n of this.open_nearby_cells_queue) {\n      new_nexts.push(...this._tryOpenNearbyCellsSingle(...n));\n    }\n    this.open_nearby_cells_queue = new_nexts;\n  }\n\n  animateOpenNearbyCells(target_x: number, target_y: number) {\n    this.open_nearby_cells_queue.push([target_x, target_y]);\n  }\n\n  _tryOpenNearbyCellsSingle(target_x: number, target_y: number): [number, number][] {\n    let cidx = this.chunk_manager.getChunkOfBlock(target_x, target_y);\n    if (!cidx) {\n      return [];\n    }\n    let [c, idx] = cidx;\n    let nexts: [number, number][] = [];\n    let clicked = false;\n    if (((c.cell_state[idx] & CELL_STATES.Clicked) || (c.cell_type[idx] === CELL_RESULTS.Open)) && c.neighbouring_bombs_count[idx] === 0) {\n      for (let yoff = -1; yoff <= 1; yoff += 1) {\n        for (let xoff = -1; xoff <= 1; xoff += 1) {\n          if (xoff == 0 && yoff == 0) {\n            continue;\n          }\n          let bx = target_x + xoff;\n          let by = target_y + yoff;\n          cidx = this.chunk_manager.getChunkOfBlock(bx, by);\n          if (!cidx) {\n            continue;\n          }\n          [c, idx] = cidx;\n          if (c.cell_type[idx] == CELL_RESULTS.Normal && !(c.cell_state[idx] & (CELL_STATES.Flagged | CELL_STATES.Clicked))) {\n            c.cell_state[idx] |= CELL_STATES.Clicked;\n            clicked = true;\n          }\n          nexts.push([bx, by]);\n        }\n      }\n    }\n    if (!clicked) {\n      return [];\n    }\n    return nexts;\n  }\n\n}\n"],"names":["$3d3546f652b7800b$var$wasm","$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$3d3546f652b7800b$var$heap","Array","fill","undefined","$3d3546f652b7800b$var$getObject","idx","push","$3d3546f652b7800b$var$heap_next","$3d3546f652b7800b$var$takeObject","ret","$3d3546f652b7800b$var$dropObject","$3d3546f652b7800b$var$cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","$3d3546f652b7800b$var$cachedUint8Memory0","Uint8Array","$3d3546f652b7800b$var$getStringFromWasm0","ptr","len","byteLength","memory","buffer","subarray","$3d3546f652b7800b$var$addHeapObject","obj","$3d3546f652b7800b$var$stack_pointer","$3d3546f652b7800b$var$addBorrowedObject","$3d3546f652b7800b$export$a0db4e1d2ed78ba0","static","create","prototype","toJSON","seed","this","toString","stringify","__destroy_into_raw","free","__wbg_generator_free","generator_seed","genChunk","cx","cy","cr_buf","neigh_buf","generator_genChunk","constructor","generator_new_from_seed","__wrap","$3d3546f652b7800b$var$getImports","imports","wbg","__wbindgen_object_drop_ref","arg0","__wbg_buffer_3f3d764d4747d564","__wbg_newwithbyteoffsetandlength_d9aa266703cb98be","arg1","arg2","__wbg_set_83db9690f9353e79","set","__wbg_length_9e1ae1900cb0fbd5","__wbindgen_throw","__wbindgen_memory","$3d3546f652b7800b$var$finalizeInit","instance","module","exports","$3d3546f652b7800b$var$init","__wbindgen_wasm_module","async","input","URL","$86237c65a99f64aa$exports","Request","fetch","Response","WebAssembly","instantiateStreaming","e","headers","get","console","warn","bytes","arrayBuffer","instantiate","Instance","$3d3546f652b7800b$var$load","resolve","import","meta","url","$3d3546f652b7800b$export$2e2bcd8739ae039","$de5db0ed4ecebadf$export$71bc2d46bb96850","Open","Normal","Bomb","$de5db0ed4ecebadf$export$ef4184f6e4880424","Flagged","Clicked","$0123b18db9d44a61$export$5a0870a55ad02f1a","g","chunk_x","chunk_y","c","cell_type","neighbouring_bombs_count","_chunk_x","_chunk_y","top_left","cell_index_at","x","y","cell_state","$43152bb5b81c6900$export$425c811473dc5a2","chunk_key","load","key","existing_chunk","loaded_chunks","Promise","existing_p","loading_queue","p","_load_chunk","then","chunk","has","delete","fromGenerator","generator","unload","_unload","worldRectToChunkBounds","world_rect","x1","x2","y1","y2","Math","floor","ceil","ensureChunksIn","chunk_bounds","unloadOutside","to_delete","Set","xstr","ystr","split","parseInt","add","k","hasLoading","size","getChunk","getChunkOfBlock","Map","$dfb200994901550f$export$f0699a20585ca727","current","target","min_speed","max_speed","factor","dt","min_off","max_off","diff","abs","off","sign","$57cdcd0f0e51185a$export$2616165974278734","targeted_block","$0978a8ca24366763$var$init","main_canvas","document","createElement","loading","getElementsByClassName","textContent","body","appendChild","app","$0978a8ca24366763$var$MinesweeperApp","remove","handle_resize","width","window","innerWidth","devicePixelRatio","height","innerHeight","scrollTo","handleResize","addEventListener","readyState","getDefaultScale","smallest_axis","min","target_nb_blocks","deltaT","current_update_time","last_update_time","update","Date","now","old_player_pos","client_player","slice","cursor_at_world","map","animateOpenNearbyCells","center_pos","curr","Infinity","visible_world_rect","getVisibleWorldRectFromCenter","ensureRegion","chunk_manager","on_init_complete","last_nearby_cell_auto_open_time","iterOpenNearbyCells","draw","requestAnimationFrame","center","canvas","blocks_per_screen_pixel","scale","width_blocks","height_blocks","player_bounds","visible_bounds","max","worldToScreen","ctx","draw_context","clearRect","values","drawChunk","clicking_block","fillStyle","globalAlpha","fillRect","players","drawPlayer","dot_width","gui_scale","cursor_coord","chunk_top_left","sx","sy","sw","sh","b_count","font","textAlign","textBaseline","fillText","border","player","block_x","block_y","strokeStyle","lineWidth","rect_coord","strokeRect","handleMouseDown","evt","preventDefault","pointerLockElement","requestPointerLock","button","actionBeginClick","actionFlag","handleMouseMove","actionMove","movementX","movementY","handleMouseUp","current_target","actionClick","handleTouchStart","handleTouchMove","handleTouchEnd","removeEventListener","handleWheel","d_scale","deltaY","dx","dy","pow","isClickable","isFlaggable","computeAutoClickTargets","cidx","bomb_count","targets","found_bombs_count","off_y","off_x","pos","new_nexts","n","open_nearby_cells_queue","_tryOpenNearbyCellsSingle","target_x","target_y","nexts","clicked","yoff","xoff","bx","by","getContext","mouse_sensitivity_inv","bind","alert"],"version":3,"file":"index.cff969c8.js.map"}